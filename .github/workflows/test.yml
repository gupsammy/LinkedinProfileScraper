# GitHub Actions workflow for automated testing and CI/CD
name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting (if available)
      run: |
        if [ -f "package.json" ] && grep -q "lint" package.json; then
          npm run lint
        else
          echo "No linting configured, skipping..."
        fi
      continue-on-error: true
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run integration tests
      run: npm run test:integration
      
    - name: Generate test coverage
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml
        retention-days: 30
        
    - name: Comment PR with test results
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          try {
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            
            const comment = `## üß™ Test Results
            
            | Metric | Coverage |
            |--------|----------|
            | Lines | ${total.lines.pct}% |
            | Functions | ${total.functions.pct}% |
            | Branches | ${total.branches.pct}% |
            | Statements | ${total.statements.pct}% |
            
            ${total.lines.pct >= 70 ? '‚úÖ' : '‚ùå'} Coverage threshold: 70%
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not read coverage summary:', error.message);
          }

  validate-extension:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate manifest.json
      run: |
        echo "Validating Chrome extension manifest..."
        node -e "
        const manifest = require('./manifest.json');
        const required = ['manifest_version', 'name', 'version', 'permissions'];
        const missing = required.filter(key => !manifest[key]);
        if (missing.length > 0) {
          console.error('Missing required fields:', missing.join(', '));
          process.exit(1);
        }
        if (manifest.manifest_version !== 3) {
          console.error('Extension must use Manifest V3');
          process.exit(1);
        }
        console.log('‚úÖ Manifest validation passed');
        "
        
    - name: Check file structure
      run: |
        echo "Checking extension file structure..."
        required_files=(
          "manifest.json"
          "background.js" 
          "src/lib/utils.js"
          "src/content/entry.js"
          "popup/popup.html"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing required file: $file"
            exit 1
          else
            echo "‚úÖ Found: $file"
          fi
        done
        
    - name: Validate JavaScript syntax
      run: |
        echo "Validating JavaScript syntax..."
        find . -name "*.js" -not -path "./node_modules/*" -not -path "./coverage/*" | while read file; do
          if ! node -c "$file"; then
            echo "‚ùå Syntax error in: $file"
            exit 1
          fi
        done
        echo "‚úÖ All JavaScript files have valid syntax"
        
    - name: Check Chrome APIs usage
      run: |
        echo "Checking Chrome extension APIs usage..."
        if grep -r "chrome\." --include="*.js" . | grep -v node_modules | grep -v coverage; then
          echo "‚úÖ Chrome APIs detected"
        else
          echo "‚ö†Ô∏è No Chrome APIs found - might not be using extension APIs"
        fi

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        if [ -f "package-lock.json" ]; then
          npm audit --audit-level moderate
        else
          echo "No package-lock.json found, skipping npm audit"
        fi
      continue-on-error: true
      
    - name: Check for sensitive data
      run: |
        echo "Checking for potential sensitive data..."
        sensitive_patterns=(
          "password"
          "secret"
          "token"
          "api_key"
          "private_key"
        )
        
        found_issues=false
        for pattern in "${sensitive_patterns[@]}"; do
          if grep -ri "$pattern" --include="*.js" --include="*.json" . | grep -v node_modules | grep -v test | grep -v coverage; then
            echo "‚ö†Ô∏è Found potential sensitive data pattern: $pattern"
            found_issues=true
          fi
        done
        
        if [ "$found_issues" = true ]; then
          echo "Please review the above findings for potential security issues"
        else
          echo "‚úÖ No obvious sensitive data patterns found"
        fi

  build-extension:
    runs-on: ubuntu-latest
    needs: [test, validate-extension]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create extension package
      run: |
        echo "Creating Chrome extension package..."
        
        # Create build directory
        mkdir -p build
        
        # Copy essential files
        cp manifest.json build/
        cp background.js build/
        cp -r src build/
        cp -r popup build/
        cp -r icons build/
        
        # Create zip package
        cd build
        zip -r ../linkedin-scraper-extension.zip .
        cd ..
        
        echo "‚úÖ Extension package created: linkedin-scraper-extension.zip"
        
    - name: Upload extension artifact
      uses: actions/upload-artifact@v3
      with:
        name: chrome-extension
        path: linkedin-scraper-extension.zip
        retention-days: 90
        
    - name: Get extension info
      run: |
        echo "Extension package information:"
        ls -la linkedin-scraper-extension.zip
        unzip -l linkedin-scraper-extension.zip

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance benchmarks
      run: |
        echo "Running performance tests..."
        node -e "
        const { performance } = require('perf_hooks');
        
        console.log('Testing module loading performance...');
        const start = performance.now();
        
        // Simulate module loading
        for (let i = 0; i < 100; i++) {
          require('./src/lib/utils.js');
        }
        
        const end = performance.now();
        const duration = end - start;
        
        console.log(\`Module loading time: \${duration.toFixed(2)}ms for 100 iterations\`);
        console.log(\`Average per iteration: \${(duration/100).toFixed(2)}ms\`);
        
        if (duration > 1000) {
          console.error('‚ùå Performance test failed: Module loading too slow');
          process.exit(1);
        } else {
          console.log('‚úÖ Performance test passed');
        }
        "

  notify-status:
    runs-on: ubuntu-latest
    needs: [test, validate-extension, security-scan, build-extension]
    if: always()
    
    steps:
    - name: Determine overall status
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && 
           [ "${{ needs.validate-extension.result }}" == "success" ]; then
          echo "Overall Status: ‚úÖ SUCCESS"
          echo "All critical checks passed!"
        else
          echo "Overall Status: ‚ùå FAILURE"
          echo "Some critical checks failed:"
          echo "Test: ${{ needs.test.result }}"
          echo "Validation: ${{ needs.validate-extension.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
          echo "Build: ${{ needs.build-extension.result }}"
        fi